---
- name: Provision EC2 Instance
  hosts: production
  remote_user: ubuntu
  become: yes
  gather_facts: no
  pre_tasks:
   - name: Apt Update
     raw: 'apt-get -y update'

  tasks:
    - name: Install python 2
      raw: test -e /usr/bin/python || (apt install -y python-minimal)

    - name: Install Python
      apt:
        name: python3
        state: present
        update_cache: yes

    - name: Install AWS CLI
      pip:
        name: awscli
        state: present
    
    - name: Install docker-py
      pip:
        name: docker
        state: present
  
    # As an initial step we make sure that we have our
    # dependencies ready. Here we're installing just
    # two:
    # - apt-transport-https makes us be able to use
    #   TLS in the transport of packages coming
    #   from APT repositories
    # - ca-certificates gives us a bundle of common
    #   certificate authorities' certificates
    - name: Install Docker Dependencies
      apt:
        name: '{{ item }}'
        state: present
      with_items:
        - 'apt-transport-https'
        - 'ca-certificates'

    # Because apt makes use of public key crypto to fetch
    # packages we must tell it what's the public key of the
    # source that is signing the packages we want to retrieve,
    # that is, we need to add the repository's key.
    - name: Add Docker Repo Apt Key
      apt_key:
        url: 'https://download.docker.com/linux/ubuntu/gpg'
        id: '9DC858229FC7DD38854AE2D88D81803C0EBFCD88'
        state: present
      register: 'add_repository_key'
      ignore_errors: true


    # Add the official docker apt repository so that `apt`
    # can list packages from it and then fetch them from
    # there.
    # With `update_cache` we force an `apt update` which
    # would essentially be the equivalent of updating the
    # list of packages from a list of source repositories.
    - name: Add Docker Repository
      apt_repository:
        repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu    xenial    stable'
        state: present
        update_cache: yes


    # With the list of packages updated we can install
    # a specific version of the `docker-ce` package. This
    # way we can declaratively tell the role which version
    # of docker we want: a stable (18.03, for instance) or an 
    # edge (17.11-rc3)?
    - name: Install Docker
      apt:
        name: 'docker-ce=18.03.0~ce-0~ubuntu'
        state: present


    # Once Docker has finished the installation (which involves
    # setting a systemd service) we have the option to either
    # enable that service or not. By enabling it, systemd hooks
    # the docker unit into specific places such that whenever the
    # machine boots we have this service started.
    - name: Enable Docker Systemd Service
      service:
        name: 'docker'
        state: started
        enabled: yes

    # If you use something like `docker swarm mode` it's
    # very common to have dangling containers around.
    # By setting a cron job to clean thing ups every N
    # hours we make sure that dangling containers don't 
    # stay around for too long.
    - name: Set Periodic Docker System Prune
      cron:
        name: docker-prune
        minute: '0'
        hour: '*/2'
        job: 'docker container prune -f'


    # Without adding the unprivileged 
    # user to the docker group we can't 
    # make use of the socket that is activated
    # by systemd. Here we take a list of users that
    # we want to make part of the `docker` group and
    # do it.
    - name: Add Users to Docker Group
      user:
        name: '{{ item }}'
        groups: 'docker'
        append: 'yes'
      with_items: 'ubuntu'
      when: 'docker_group_members is defined'